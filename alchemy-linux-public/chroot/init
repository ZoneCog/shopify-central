#!/bin/sh

user_shell () {
  busybox mount -t tmpfs dev /dev
  mkdir -p /dev/pts
  busybox mount -t devpts devpts /dev/pts

  echo '  Entering rescue shell.'
  setsid cttyhack sh
  /bin/busybox sh

}

sys_init () {

  mkdir /proc
  mkdir /sys
  mkdir /dev
  mkdir /etc
  busybox mount -t tmpfs dev /dev
  busybox mount -t proc proc /proc
  busybox mount -t sysfs sysfs /sys

  echo "mdev" > /proc/sys/kernel/hotplug
  echo 0 > /proc/sys/kernel/printk
  mknod /dev/null c 1 3
  chmod 777 /dev/null
  mdev -s
}

sys_deinit () {

  echo "" > /proc/sys/kernel/hotplug
  rm /dev/null
  umount -l /proc
  umount -l /sys
  rmdir /proc
  rmdir /sys

}

main () {

  INIT_ARGS="$(awk '{gsub(/[[:graph:]]+=[[:graph:]]+/,""); print}' /proc/cmdline)"
  # remove any initramfs commands from INIT_ARGS
  INIT_ARGS="$(echo $INIT_ARGS | awk '{gsub(/shell/,""); print}')"
  INIT_ARGS="$(echo $INIT_ARGS | awk '{gsub(/init_debug/,""); print}')"
  INIT_ARGS="$(echo $INIT_ARGS | awk '{gsub(/ssh_key/,""); print}')"
  INIT_ARGS="$(echo $INIT_ARGS | awk '{gsub(/command_url/,""); print}')"
  REAL_ROOT='/tmp/realroot'

  # Parse out kernel arguments
  for arg in $(cat /proc/cmdline); do
    case $arg in
      init_debug)
        DEBUG=yes
        set -x
        ;;
      shell)
        EXEC_SHELL=yes
        ;;
      ssh_keys_url=*)
        SSH_KEY_URL="${arg#*=}"
        ;;
      command_url=*)
        CMD_URL="${arg#*=}"
        ;;

    esac
  done

  mkdir -p $REAL_ROOT
  mount -o loop -t squashfs /system.img $REAL_ROOT

  if [ "$EXEC_SHELL" == "yes" ];then
    user_shell
  fi


  mkdir /newetc
  mkdir /newtmp
  mkdir /run
  mkdir /lock
  mkdir /log

  mkdir -p /lib/firmware
  mount --bind $REAL_ROOT/lib/firmware /lib/firmware


  # Create tmp systems
  mount -t tmpfs tmpfs /newtmp
  mount -t tmpfs tmpfs /newetc
  mount -t tmpfs tmpfs /run
  mount -t tmpfs tmpfs /lock
  mount -t tmpfs tmpfs /log


  # System mounts
  mount --move /newtmp $REAL_ROOT/tmp
  mount --move /run $REAL_ROOT/run
  mount --move /lock $REAL_ROOT/var/lock
  mount --move /log $REAL_ROOT/var/log

  # Set up etc
  cp -r etc/* /newetc
  mount --move /newetc $REAL_ROOT/etc

  echo "Preparing network interfaces"
  has_if=0
  until [ $has_if -eq 1 ];do

    for i in /sys/class/net/eth*; do
      if [ -d $i ];then
        iface=`basename $i`
        echo "Attempting to bring up $iface"
        ifconfig $iface up
      else
        echo "No network interfaces exist! bailing out."
        user_shell
      fi
    done

    # Prepare network interfaces where a link was found
    for interface in `ls -1 /sys/class/net/ | grep '^eth' `; do
      if [ "`cat /sys/class/net/$interface/carrier`" == "1" ];then
        has_if=1
        echo 'template=dhcpcd' > $REAL_ROOT/etc/conf.d/netif.$interface
        chroot $REAL_ROOT ln -s /etc/init.d/netif.tmpl /etc/init.d/netif.$interface
        chroot $REAL_ROOT rc-update add netif.$interface default
        break
      fi
    done
  done


  # Process anything specified by a kernel arg we handle
  [ -n "$SSH_KEY_URL"  ] && echo "$SSH_KEY_URL" > $REAL_ROOT/tmp/key_url
  if [ -n "$CMD_URL"  ];then
    echo "curl '$CMD_URL' > /tmp/bootstrap; bash /tmp/bootstrap" > $REAL_ROOT/etc/local.d/01-bootstrap.start
    chmod +x $REAL_ROOT/etc/local.d/01-bootstrap.start
  fi

  umount /lib/firmware
  sys_deinit

  if ! exec switch_root $REAL_ROOT /sbin/init ;then
    echo "Pivoting to new sytem failed :( you're on your own, good luck!"
    user_shell
  fi
}

export PATH=/bin:/sbin:/usr/bin:/usr/sbin
sys_init
trap 'user_shell' SIGHUP SIGINT SIGTERM
main
