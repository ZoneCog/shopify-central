$bind_mounts      = [ "sys", "dev" ]

namespace :util do

  desc "Clean (nuke) the build directory"
  task :clean => [:unbind_chroot] do
    sh "sudo rm -rf #{$chroot_dir}"
  end

  desc "Prepare bind-mounted chroot directories"
  task :bind_chroot do
    $bind_mounts.each do | dir |
      bind = "#{$chroot_dir}/#{dir}"
      sh "sudo mkdir -p #{bind}"
      sh "sudo mount --bind /#{dir} #{bind}"
    end
    sh "sudo mkdir -p #{$chroot_dir}/proc"
    sh "sudo mount -t proc none #{$chroot_dir}/proc"
  end

  desc "Unmount bind-mounted chroot directories"
  task :unbind_chroot do
    mounts = $bind_mounts + [ "proc" ]
    mounts.each do | dir |
      bind = "#{$chroot_dir}/#{dir}"
      puts "Releasing bind mount #{dir}"
      sh "sudo umount -l #{bind} || true" unless not File.directory? bind
    end
  end

  desc "Post build steps"
  task :post_build => [:unbind_chroot] do
    pkg_dir = File.join( $chroot_dir, "/usr/portage/packages")
    if File.directory? pkg_dir
      pkg_cache = File.join($root_dir, "/cache/packages")
      sh "mkdir -p #{pkg_cache}"
      sh "sudo cp -r #{pkg_dir}/* #{pkg_cache}/"
    end
  end

  desc "Fetch seeder stage3"
  task :fetch_stage do
    cache  = File.join($root_dir, 'cache' )
    stage3 = File.basename($config['stage3_url'])

    unless File.directory? $chroot_dir
      sh "sudo mkdir -p #{$chroot_dir}"
      sh "sudo chown -R `whoami` #{$config['work_dir']}"
    end

    # Fetch the stage3 if we don't have it cached
    unless File.exist? File.join(cache, stage3)
      sh "wget #{$config['stage3_url']} -P #{$config['work_dir']}"
      sh "mkdir -p #{cache}"
      sh "mv #{File.join($config['work_dir'], stage3)} #{cache}"
    end

    # Extract the stage3 if we haven't already
    unless File.exist? File.join($chroot_dir, 'extracted')
      sh "sudo tar -xpf #{File.join(cache, stage3)} -C #{$chroot_dir}"
      sh "sudo touch #{File.join($chroot_dir, 'extracted')}"
    end
  end

  desc "Inserts local and remote overlays"
  task :insert_overlays do

    overlays = []
    overlay_dir = File.join($chroot_dir, '/usr/local/portage')
    local_overlays = File.join($root_dir,'overlays')
    sh "sudo mkdir -p #{overlay_dir}"
    if $config.has_key? 'overlays'
      $config['overlays'].each do |overlay|
        base = File.basename( overlay ).gsub('.git','')
        clone_dir = File.join(overlay_dir, base)
        sh "sudo git clone #{overlay} #{clone_dir}" unless File.directory? clone_dir
        overlays.push(base)
      end
    end

    Dir.foreach(local_overlays) do | node |
      if File.directory? node
        next if node == '.' or node == '..'
        overlay = File.join(local_overlays, node)
        sh "sudo cp -r #{overlay} #{overlay_dir}"
        overlays.push(overlay)
      end
    end

    overlays.each do | overlay |
      sh "sudo sed -i 's:^PORTDIR_OVERLAY=\"\\(.*\\)\"$:PORTDIR_OVERLAY=\"#{File.join("/usr/local/portage/",overlay)} \\1\":g' #{File.join($chroot_dir, "/etc/portage/make.conf")}"
    end
  end

  desc "Copy seed files into image"
  task :seed_image, [:version] => [:fetch_stage] do | t, args |

    if args[:version].nil?
      version = "wip"
    else
      version = args[:version]
    end

    dist_dir   = File.join($chroot_dir, '/distfiles')
    local_dist = File.join($root_dir, 'distfiles')
    pkg_dir    = File.join($chroot_dir, '/packages')
    local_pkg  = File.join($root_dir, 'cache','packages')
    boot_dir   = File.join($chroot_dir, 'bootstrap')
    world_seed = File.join(boot_dir, "packages")

    # Make the lsb release file
    lsb_release = <<-eos
DISTRIB_ID="Alchemy Linux"
DISTRIB_RELEASE=#{version}
DISTRIB_DESCRIPTION="Alchemy Linux #{version}"
eos
    File.open(File.join($config['work_dir'],'lsb-release'), 'w') { |file| file.write(lsb_release) }

    # Generate authorized keys from config file
    File.open(File.join($config['work_dir'],'authorized_keys'), 'w') { |file| file.write("# This file generated by Alchemy Linux build\n") }
    if $config.has_key? 'ssh_keys'
      $config['ssh_keys'].each do |key|
        File.open(File.join($config['work_dir'],'authorized_keys'), 'a') { |file| file.write("#{key}\n") }
      end
    end

    # Copy distfiles
    unless Dir["#{local_dist}/*"].empty?
      sh "sudo mkdir -p #{dist_dir}"
      sh "sudo cp -r #{local_dist}/* #{dist_dir}"
    end

    # Copy package cache
    unless Dir["#{local_pkg}/*"].empty?
      sh "sudo mkdir -p #{pkg_dir}"
      sh "sudo cp -r #{local_pkg}/* #{pkg_dir}"
    end

    # Copy the etc directory
    sh "sudo cp -r #{File.join($root_dir, 'etc')} #{$chroot_dir}"

    # Insert resolv.conf so networking will work in the chroot
    sh "sudo cp  /etc/resolv.conf #{File.join($chroot_dir, 'etc')}"

    # Include the lsb-release file
    sh "sudo cp  #{File.join($config['work_dir'], 'lsb-release')} #{File.join($chroot_dir, 'etc')}"

    # Copy the bootstrap files
    sh "sudo mkdir -p #{boot_dir}"
    sh "sudo cp -r #{File.join($root_dir, 'chroot')}/* #{boot_dir}"

    # Include the authorized keys
    sh "sudo cp  #{File.join($config['work_dir'], 'authorized_keys')} #{boot_dir}"

    # Setup the username / password from config file
    sh "sudo sed -i s:USERNAME:#{$config['username']}:g #{File.join(boot_dir,'adminuser')}"
    sh "sudo sed -i s:PASSWORD:#{$config['password']}:g #{File.join(boot_dir,'adminuser')}"

    # Copy each selected package class to build world file
    sh "sudo mkdir -p #{world_seed}"
    $config['packages'].each do |pkg_class|
      sh "sudo cp #{File.join($root_dir, 'packages', "packages.#{pkg_class}")} #{world_seed}"
    end

  end

end


