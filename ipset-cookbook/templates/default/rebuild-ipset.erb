#!<%= @hashbang %> -w
# -*- mode: ruby -*-
# vi: set ft=ruby :
#
# rebuild-ipset.rb -- Construct an ipset restore file from fragments.
#
# Copyright (C) 2015 Brad Ison
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

SETS_D = "/etc/ipset/sets.d/"
OUTPUT = "/etc/ipset/ipset-generated"

def current_sets
  output = `/sbin/ipset list`
  output.each_line.select { |l| l.include?('Name: ') }.map { |l| l.gsub('Name: ', '').strip }
end

def write_ipset(file, data)
  File.open("#{file}.new", "w") { |f| f.write(data) }
  File.rename("#{file}.new", file)
end


def load_ipset(data)
  dir = File.dirname(OUTPUT)
  Dir.mkdir(dir) unless File.directory?(dir)

  write_ipset(OUTPUT, data)

  system("/sbin/ipset restore -file #{OUTPUT}")
end


def generate_ipset
  data = <<-EOS.gsub(/^\s+/, "")
    ###########################################################
    #                                                         #
    # Generated by rebuild-ipset at #{Time.now} #
    #                                                         #
    ###########################################################
  EOS

  data << "\n"

  Dir.foreach(SETS_D) do |e|
    set_file = File.join(SETS_D, e)
    next unless File.file?(set_file)

    data << File.read(set_file)

    data << "\n\n"
  end

  data
end

def clean_sets(new_sets_commands, current_sets)
  current_sets.each do |set|
    unless new_sets_commands.include?("create #{set}")
      exit $?.exitstatus unless system("/sbin/ipset destroy #{set} -exist")
    end
  end
end

new_sets_commands = generate_ipset
load_ipset(new_sets_commands)
clean_sets(new_sets_commands, current_sets)
