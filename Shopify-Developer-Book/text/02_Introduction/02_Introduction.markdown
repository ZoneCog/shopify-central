## The Shopify Platform ##

Shopify’s API allows external computer programs to interact with a shop according to certain rules. Almost anything the merchant can do to their own shop from their admin can be done from the API.

If an attempt is made to communicate via the API to a shop and that request is authenticated, it will go through and probably return some data as XML or JSON. Maybe that request will return HTML in a separate website. As long as the request is formatted correctly and has the correct authentication token, it will work.

A Shopify App is an externally hosted web application that uses this API to connect to a shop and interact with it programmatically. Shopify merchants can give external Apps permission to access their shops to provide additional functionality – this act is synonymous with “installing an app”. App installation is usually initiated by a visit to the [Shopify App Store](http://apps.shopify.com). 

There is no real limit to the number of uses for apps as far as Shopify is concerned. This is a very powerful argument for why Shopify is a leader in hosted ecommerce since the API and platform are very well done for this kind of computing. Apps can be hosted in the cloud, on a personal server, or even run off of laptops in a coffee shop.

Some apps are free, others have a monthly recurring fee, and some charge a one-time fee. Some apps use combinations of these. 

It is entirely possible for a merchant to develop or pay to have an app developed that will only ever be installed and used in his or her shop. 

The diagram presented here illustrates the relationships that three specific types of people will have with Shopify: the customer, the merchant and the Shopify App developer.

<div class="figure">
  <img src="../images/platform.png" alt="The Shopify Platform and Users" />
</div>

A customer will typically only interact with a shop. A shop may interact with Shopify using the Javascript API to do AJAX. Both the merchant and the app developer also interact with the shop to ensure that it is rendering properly. The merchant runs the shop and deals with orders. Merchants may also log into their apps to control things like fulfillments, inventory management, communications with customers, status updates of orders and any number of other things. App developers will also likely be logging into the app to ensure that operations are optimal. It is possible for both the merchant, the app developer and the customer to use an app that presents a public-facing web presence. For example, the customer could log in at _someapp.fizzbuzz.com_ to check on their order status. The merchant might very well log in at _someapp.fizzbuzz.com/admin/_ to deal with setting up special aspects of their orders. Finally, all shop webhooks and app links added to the shop admin by the app, would be accessed at _someapp.fizzbuzz.com/shopify/_ through the Shopify authentication mechanism. 

### Shop Administration

One of the most important aspects of setting up and managing a shop for online sales, has to be the web based user interface for controlling products, orders, themes, navigation, collections and all the many aspects that make up a Shopify shop. Originally, Shopify provided some very basic templates to build a shop and the support functions for setting up an inventory of products and collections. The limited degree of functionality made it possible to quickly open up a shop that looked good. As the number of merchants expanded from hundreds to tens of thousands, the administrative interface became the focus of much attention. Every button or link click is under constant scrutiny, with lots of public discussion on how the changes affected merchants. The administration interface operates as an example of a well thought-out design that relies on incremental change, as opposed to radical makeovers. Considering the backlash that a lot of web applications generate when changing their look and feel, Shopify has done a great job of delivering improvements while maintaining consistency. Merchants have to invest in learning how to use Shopify. So it would seem problematic to be constantly changing the way they interact with their shop. The early version of product tags was a text-based interface. Adding or removing tags was neither intuitive nor awkward, but it was not clear how tags worked to improve a shop for customers. By providing examples and guidance on tags and using them with collections to filter products, they became a much more useful part of administration. Tags are now managed with a nicer interface of clickable pills.

### Liquid Templating

Web application developers have adopted numerous patterns and techniques for delivering the HTML that makes up the *look* and *feel* of a web application. The first popular web application platforms usually rendered information through a combination of what is commonly referred to as spaghetti code. The mixing of scripting code with output code. PHP was and still is one of the best sources to find examples of this pattern. There, you can be sure developers will be mixing authentication code, SQL database code, form code and other HTML elements directly in the same file. The obvious problem with this mess is that programmers, designers and integrators are all working on the same code. In actuality, this meant that only programmers were able to perform all of those functions. A great innovation was to separate the two camps. This was done by keeping the responsibility of programming for the programmers and letting designers take care of the views. The introduction of templating for web applications meant a template could render the look, while the application's scripting provided the data. This is a pretty good pattern for systems where the end-user is also the owner of the data. Most Wordpress sites function this way as well. 

With a hosted platform like Shopify, there is simply no chance that a merchant can directly script their shop. This is because there is a high probability that a merchant would destroy valuable data with a single erroneous command. Instead, Shopify provides merchants with secure and non-destructive access to all of the shop's data, while providing sophistication in rendering that data nicely. The templating project was created by Tobias Lütke and is called [Liquid](https://github.com/Shopify/liquid). It is this open-source templating language that is the real star of the Shopify platform for merchants and theme designers. Liquid provides access to shop data without requiring merchants to have a secret database password nor requiring them to create and run complex SQL database queries. Liquid provides common programming idioms like *looping* over sets of data, making *conditional branches* to do one thing or another, and has also been set up by Shopify to provide a large set of very useful *filters* that can be applied to data.

The Liquid processing phase is crucial to a merchant's solid understanding of Shopify. For example, say a request arrives from an Internet customer for a shop at _someshop.myshopify.com_. Shopify locates the shop and loads up their _theme.liquid_ file. By processing the _theme.liquid_ code line-by-line, a series of assets get pulled into the theme. Examples are the Cascading Style Sheets (CSS) and the Javascript. Each _theme.liquid_ file has to specify where to render or draw the content of the current request. This could be the homepage, a product, a blog, a collection or even the cart. Shopify determines the correct Liquid file to pull in and adds it to the whole page once it has been processed. A theme file like _product.liquid_ can specify snippets of Liquid code to include in the processing chain. Sometimes it is beneficial to take a special aspect of a shop, like a homepage carousel showing off products, and keep all of that code together in a snippet. Snippets can be re-used on other parts of the site by including the snippet in the Liquid files that need them. Once all of the code is assembled, processed and added together, the Liquid is quickly converted into HTML and receives output as a complete web page for the customer.

The implication for merchants and developers is that they cannot inject code into Liquid. You cannot use Javascript to alter Liquid. It must be understood that Liquid is going to completely process all of the shop data and provide the HTML Document Object Model (DOM) that is rendering in a web browser. Shopify provides an opportunity to take advantage of this Liquid rendering stage to make theme rendering somewhat programmable. Any settings that a theme provides as Liquid gets processed too. One example of where this comes in handy, is in the style sheets for a site. You can name a CSS file _uncle-bob.css.liquid_ and this file will be processed with any Liquid being turned into actual CSS directives. A merchant that wants to make their text *bold* and *red* instead of *italic* and *blue*, could use the shop's theme settings link. There is a huge amount of creativity available with this system. It also keeps merchants and developers on track since they cannot break their shop. Totally illegal and bad Liquid will usually generate an error and not be saved or used. Shopify is also all about speed and is one of the *fastest* hosted platforms available, thanks in large part to Liquid that has been compiled into HTML and aggressively cached. If five, ten or even hundreds of people all request the same shop at the same time, they will all get the same copy of the HTML in their browser quickly. Shopify will not be compiling the Liquid five, ten or hundreds times, but instead will deliver the shop from fast cache nearest the customer. This is why it is important for merchants and developers to write efficient Liquid whenever possible. It is very easy to set up loops within loops within loops to provide a clever shopping experience. However, when analyzed with an algorithmic eye, while these kinds of Liquid constructs do work, they are inefficient. Shopify will not usually interfere with how people use Liquid.

<div class="figure">
  <img src="../images/TypesOfShops2.png" alt="Possible Distributions of Shops and Their Uses of the Shopify Platform"/>
</div>

### Javascript API

Javascript is usually used inside web browsers on HTML documents. Web applications use HTTP GET and POST to process requests and generate responses for those browsers. Every submit button or link click can result in a whole new web page being sent to the browser. Microsoft developed Asynchronous HTTP that came to be widely known as AJAX (or XHR). AJAX allowed a website to send a request to a server and then listen for the reply, which could come later using a callback function. This radically changed the entire web since it meant that a website could replace a small part of itself with new information, rather than the entire page. Shopify fully embraces this with the Javascript API. Any shop can use Javascript to send AJAX requests. An example would be to load a cart with 16 products, each with a unique quantity. Once that completes, another request could request the contents of the cart in order to get the total price of all the cart items. Javascript can set a cart note from the homepage. It can delete a product in the cart from the product page. There is a whole world of very useful scripting that can be done with basic Javascript and the Javascript API. The Javascript API truly is a crucial and wonderful aspect of developing shops on the Shopify platform. 

There are some interesting Javascript files, apart from the Shopify Javascript API, that are available to help make shops more sophisticated in their product presentation. The most common is probably the *option selector* code. This is available for shops that want to present products with various options like colour, size or material. The natural HTML element to use when presenting options is the *select* element. The use of options can increase the number of variants dramatically. A product that has three colours, four sizes and six different materials generates seventy-two variants! Shopify allows up to one hundred variants per product. The Javascript option selector code presents each option in its own select element making it pretty easy for a customer to select from the available colours, sizes and materials to quickly find the variant they want to purchase. It also allows a merchant to present when variants are sold out or even hide unavailable products. Shopify offers a small Javascript file that will hide any options that are sold out, allowing a shop to present only variants that are in stock. This is a very handy extension to the usual option selector code. 

There is also free Javascript that can present estimated shipping costs in the cart, so they can be seen before checkout. The customer sees a form that collects the general delivery location via a zip or postal code, and then uses the Shopify API to query the shipping services set up for the shop. For shops that offer high-priced small-sized items (eg. jewelry) or ones that offer cheaper large-sized items (eg. stuffed animals), shipping can be a real problem to accommodate well because freight is calculated based on dimensional packaging and not necessarily weight. The Shopify shipping estimator can really help customers see a close approximation of the true price of a purchase before any shocks occur at checkout. This can help convert carts into sales. 

Shopify also provides some Javascript called [Customizr](http://wiki.shopify.com/The_shop-owner_guide_to_product_customization_in_Shopify) – GitHub repo available at [https://github.com/carolineschnapp/customizr](https://github.com/carolineschnapp/customizr). If a merchant has to record a name for an engraving on a glass baby bottle or collect the initials to be monogrammed on a leather handbag or any other number of customization tasks, it is almost certain that collecting this information will be done using *cart attributes*. Cart attributes are passed through checkout and are available in the *Order Notes* section of the order's details. Cart attributes can be rendered in the order confirmation email, in order to inform the customer of their purchase details. Further, there are opportunities to help a shop since orders can be sent to a custom app using WebHooks. A custom app can also perform additional business logic based on the cart note and cart attributes. This is described in more detail when talking of App development itself elsewhere in this guide. Using cart attributes to collect information is *complex*. This is because a merchant has to collect data at the product presentation level while recognizing previous customization efforts. When switching to the cart view, shoppers will often want more than one product. The customization code has to manage quantity as well. When shoppers remove an item from their cart, any corresponding cart attributes have to be dealt with. Checkout is separate from the shop and if a shopper starts checkout but then decides to revisit the shop, all the customization has to be available. Hence, any code to handle customization has to be rock solid and demonstrate a mastery of browser features like localStorage, cookies and the ability to serialize data as JSON. Ultimately, a merchant has to be able to know if a glass baby bottle gets etched with the name "Eddy" or a handbag gets the initials "G.B.H" or "S.N.F.U". Because Shopify provides it, Customizr goes a long way to making this possible, without a major investment in custom Javascript code. 

### Shopify API

For merchants and developers, the [Shopify API](http://api.shopify.com/) is the most important and best feature of Shopify as an ecommerce platform. For those that like convenience (and really who doesn't), the various available API wrappers offer excellent opportunities to work with shops and their data. The [Ruby version](https://github.com/Shopify/shopify_api) provides a Command Line Interface (CLI) that can query a shop using the API with just a few lines of code. It is possible to alter every product in a shop by changing the product's *type* or *vendor*. This beats downloading the inventory as CSV, editing those values, importing that CSV and waiting many minutes.

Developers should join the [Shopify Partner](https://app.shopify.com/services/partners) program to begin working with Shopify merchants on both their shops and on apps. The partner application allows developers to create Test shops and apps. To get started when creating an app, it needs a name. Once created, it generates an API token and a shared secret. Then, it can be installed into a shop. An app can issue HTTP requests using XML or JSON formatted data. An app that formulates requests, as per the Shopify API can be used to provide additional functionality to a shop. Apps can be created to add features to just one shop as a private exercise, or created for installation in thousands of shops. Hosting an app in the cloud makes it easy to ensure that the app has the resources to handle hundreds or thousands of installations. Some developers prefer to run their own servers and that works equally well. To test apps out, they can even be on a laptop located in a coffee shop.

The API itself is well described by Shopify. However, it may still be opaque to merchants and developers exactly what this API can be used for. One example to illustrate the use of a custom app and the API, is a shop that sells works of art, an online art gallery. Art is a unique domain with specific features that make it interesting and non-traditional for ecommerce. In an online art gallery, a work of art like a painting is for sale as the product. Paintings can be organized into collections, just as they would in a gallery or museum. For example, paintings may be categorized as being abstract, contemporary, mixed media or print. The challenge for a gallery is to present all of the unique attributes of a piece of art. A painting also belongs to an artist, who almost certainly has a biography. Additionally, a painting has a history. It may have been exhibited in other galleries and museums. Each exhibition adds value to the painting's narrative. The history, artist's information and other metadata is best captured as resources that are attached to the painting, rather than as something stuffed into the painting's description. Using the API, it is easy to capture this metadata and create resources that can be attached to each product. Thus, a shop can manage products for sale so that they render their own history and without it being tightly coupled to the product description. Using an app and the API, it is possible to capture all of the unique product details as resources and to present those resources when needed. 

To make a gallery-style shop easier to manage, these extra resources have to be available to the merchant and designer so that they can be presented in the shop's theme as Liquid. An app has an option to add an *App Proxy*. An App Proxy serves as a *special page* in a shop. A online art gallery shop can navigate clients to the special page and render all of the custom resources. An example is when showing the special page, there is a Liquid template that contains custom Liquid tags. 

@@@ html
<div class="artist">
  <h2 class="artist-name">{{ artist.name }}</h2>
  <p>{{ artist.country }}</p>
  <p>{{ artist.biography }}</p>
</div>
@@@

When a customer visits this page, there is a brief request made to the App Proxy providing the app with the artist's identification such as name. The app looks for the Liquid template it installed in the shop and it reads that template since it could have been altered by the merchant or theme designer. The App Proxy then searches the app for the artist's information based on the name provided. Once found, it replaces the Liquid tags with the appropriate information. The app then sends the Liquid template back for processing by Shopify. Customers will see the artist's information like their name, country and biography, along with a collection of the artist's paintings, all rendered from a standard Shopify collection. This is one example of the endless possibilities and combinations which can be created with apps and the App Proxy.

The combination of the Shopify API, externally hosted apps and their App Proxies, provide merchants and developers with an amazing degree of latitude to make shops that go far beyond the basics of selling snowboards or t-shirts. Constant development and improvement to these platform features ensure that we will be seeing incredibly slick and interesting shops in the future.

### Theme Store

When Shopify went public, there were just a handful of themes available. Merchants could download these themes as zip files and tinker with the HTML, Javascript, CSS and Liquid constructs using a text editor. There were three ways to see the effect of editing a theme. One was to edit the theme on your computer, zip compress the edited files and upload them to the shop. A second way was to edit the theme directly inside the shop administration screens. This was not a great option at that time, since Javascript editors were primitive and error-prone. The third was provided by a web application called Vision, which you installed on your computer. Vision provided a small inventory of snowboards for sale and the shop templates showed off any theme changes the merchant made. This approach was panned and ultimately abandoned as it failed to keep up with Shopify itself. A lot of merchants had trouble with theme changes that always showed snowboards for sale. The Vision inventory of products, pages and collections could be hacked because it was just a text-based YAML file. But this was also tedious and prone to error. Most merchants were happy when Shopify abandoned Vision and decided to provide Test shops to work off of. As mentioned, when you become a Shopify Partner, you can create as many Test shops as you need and assign as many themes as you want to them. You can also load real inventory into a Test shop. This provides a great way to develop a theme without the risk of borking a live production shop from making sales. At the same time as the Partner program was initiated, Shopify presented a [Theme store](http://themes.shopify.com/) where merchants could download free or paid themes. Here, paid themes usually come with features that might otherwise cost money for merchants to develop themselves.

For talented web designers that understand the nuances of cross-browser issues with respect to Javascript and Cascading Style Sheets as well as Liquid scripting, having a theme in the Theme store is a great way to make money. It is also likely that the first thing a new Shopify merchant will invest in is the look of their shop and hence, a visit to the Theme store.

### App Store

Like the Theme store, when Shopify released the API and paved the way for apps to be developed and integrated into shops, they created the [App store](http://apps.shopify.com/). Shopify's mantra of keeping their core set of features simple ensures there is a useful place for custom apps. Custom apps can deliver any extras merchants may demand. There are hundreds of apps that can be installed in a shop and this number is sure to continue climbing as merchants continue to express their desire for additional features.

For Shopify developers, the App store presents their app to merchants as well as anyone researching the Shopify platform. To make the financial aspect of developing and servicing apps easier, Shopify makes their billing API available to developers. In exchange for 20% of app profits, Shopify collects the money from merchants directly and deposits it in the developer's Partner account. This is great for developers that do not have access to online credit card processing. It is possible for developers to set up one-time charges, recurring monthly charges and forget worrying about payments. As of June 2012, Shopify is paying developers on a bi-weekly basis, making it very similar to working for a company.

### Shopify Experts

As the number of merchants has grown, it is only natural that some of these merchants will have needs that exceed the core features provided by Shopify. These merchants need to know that they can have their unique processing demands taken care of, without having to launch a search for talent. [Shopify Experts](http://experts.shopify.com/) was launched to showcase the talent who work on the Shopify platform. Theme designers, app developers, photographers and even accountants can join to show off their portfolio and capabilities. The slots available in the Experts Showcase for accountants and photographers show that these skills are also in demand by merchants. Merchants use photographers to present the best possible look for their products. They also use accountants in order to create reports on what is flowing through their online store.


