### Forward

Being a software developer for the Shopify platform is a great way to work with computing skills that are currently in demand and to pay the bills. Ecommerce is seeing explosive growth and there are new markets constantly emerging. Working on Shopify merchant sites and App projects, your email inbox fills with letters like: “Just thought you’d like to know Shopify sent you $148.00 USD” or “FizzBuzz.com just sent you $2622.50 USD with PayPal”. That should inspire the effort to learn the API and programming patterns for ecommerce! It is a great way to earn _passive_ income that you can combine with working for merchants to make _active_ income. It’s a career, can be the basis for a successful business, and offers up a wide range of interesting opportunities. Specializing on theme development is financially rewarding for those with design flair and skills. App development and making custom scripts for merchant shops is my favourite. It offers the challenges of using cloud computing, networking, database development, connecting to API driven services like social media and many others. 

It is great when the code you’ve written helps a merchant increase their sales by 20% overnight! I sincerely hope that developers who are considering to work on Shopify projects read this and are inspired to work on making the next great merchant shop or App. I have worked with and for hundreds of happy merchants and they continue to tell me how happy they are with the Shopify platform. 

### Preface

I like to think that I don’t really mark time with much enthusiasm or rigour, preferring to live day to day and trying to learn something new every day, without following some rigid plan. When I began my professional career developing code to non-destructively test steel bridges for structural integrity, I marked off eight years before I sensed I had done enough crazy climbing and driving and that I needed a break from such responsibility. I spent a good five years around the dotcom bubble renting a nice office with good friends while trying to make web apps. Then I spent five more years taking on a variety of consulting gigs that, in the end, never amounted to a hill of beans. But it did teach me how to wear various kinds of business hats. 

I ended up catching the Shopify bug and tried working with a boutique web agency. As five more years passed, I realized that I knew a lot about running an independent computer business and that I knew a lot about tricking out Shopify for an ever growing list of clients. I have yet to give myself an official work title, nor have I declared my intentions or loyalty to any one type of computing. My corporation is an expensive accounting exercise that I leave to those who get a kick out that kind of thing. While in one sense I run my corporation every day, in another, I am sure it is going to reach a decade in age when I am going to look at its history like I do my old vinyl LP collection. One needs a corporation to run off invoices and interact with clients in foreign nations, so I go along with that, but it has certainly not been a means to some well-planned out end. Dividends anyone?

One beautiful autumn day in Montreal, Shopify came for a visit with their CTO Cody Fauser, Joey Devilla on the Accordion, and Edward Ocampo-Gooding, the King of the API, with much swag and the company credit cards to cover the beer bill. We owe that to Meeech who organized it all and attracted a small but curious crowd of locals to hear more about Shopify. I decided at that time to pitch this effort – an eBook written from the perspective of a developer who has a lot of experience working on but not for Shopify. Over the years using the nom de plume of Hunkybill on the Shopify public forums, I wrote many words on many subjects and endured the whole gamut of possible responses. My all-time favourite remains *Plonk* because that word continues to tickle my funny bone. If a couple of thousand Hunkybill posts survive on some hard drive in some data centre for a few more years that is one thing, but I was pretty sure I wanted to create something a little more structured and formal.

### Acknowledgements

First and foremost, I want to say a big thank you to Shopify for supporting this effort through the Shopify fund. Over the years I have expended energy and time recommending Shopify to all comers. At the same time, I can see that I was also a critical and not always a perfect gentleman in my writing. Instead of ignoring me and my pitch, Shopify chose to sweep aside some of the lower points from the past and take the high road. For that, I am grateful. 

To all the developers and designers that I have interacted with, I owe a hearty thanks to as well. Some fine people have come and gone from the Shopify community over the years and I respect the fact that a lot of their contributions remain useful and just as valid today, as they were five years ago. It is very inspiring to have witnessed how one Caroline Schnapp jumped into the Shopify community, starting off with some simple scripting work to make shops better, until ultimately she was so valuable to Shopify that they hired her! My thanks to Caroline for sharing with me her wisdom about how Shopify really works and for always correcting me when my forum posts are clearly sour or just plain wrong. I mean no harm to anyone and am trying hard to avoid controversy these days.

I also want to thank Tobi Lütke from Shopify for his numerous great contributions to open source software like [Liquid](https://github.com/shopify/liquid) and [Delayed Job](https://github.com/shopify/delayed_job). Programmers always learn by studying what other successful programmers have done and I must admit that I have learned many good things from his code. 

Thanks to Jesse Storimer for sharing his eBook tools with me and his code. His original Shopify API Sinatra application was the inspiration that moved me to develop an App for myself and today I have over 500 installed Apps all based of off Sinatra running well in the cloud thanks to Heroku! The best developer friendly cloud platform has to be Heroku. 

Thanks also to Cody, Edward, Joey and Harley for their hospitality when I trucked on down the 417 to Ottawa for a visit to the new office. The new office is a very swell place to work and I am sure the entire gang that works there have one of the better workplaces in all of Canada to go to on a daily basis.

Thanks to my wife and kids for putting up with a guy who likes to sit in the corner all day and poke away at a keyboard instead of doing something heroic like flying space shuttles or putting out forest fires or saving baby seals from being clubbed. I try to be exciting for you but I just can't seem to find the right chords.

### Who is this eBook For? ###

If you know nothing about Shopify, this book will provide some information about how it all works. Perhaps enough to inspire someone to go the next step and do some real research. 

If you know a little something about Shopify, this book will teach you at least one thing you did not know.

If you want to develop Apps for Shopify or build a theme for someone, this book will shed some light on the particulars of doing that. 

### What is Assumed by the Author? ###

Nothing. Assumptions are almost always wrong. This is no written attempt to coddle anyone on the path to mastering some specific aspect of Shopify. This book is *not* a “Learn Shopify in 7 minutes, 7 hours or 7 days” recipe book. There is no attempt to put into words any of the magic spells, incantations or dangerous chemistry that goes into the work-a-day world of a professional Shopify coder.

### About the Author ###

My engineering career started professionally in 1990 at about the same time the World Wide Web was invented, with the introduction of HTTP protocol for the Internet. Before the use of HTTP was common, the Internet was mainly used to exchange email using SMTP, to post messages and have discussions on Usenet using NNTP, or to transfer binary and text files between clients and servers using FTP. Archie, Veronica and Gopher were other interesting choices to use for searching documents. Once the Internet concept jumped across the early adopter chasm to be embraced by the dotcom businesses and general population, a flurry of changes ensued. Nortel had ramped up to make the Internet as fast and capable as it is today (and ironically Nortel crashed in the resulting process) and throngs of business people sitting on the sidelines with few clues about what to do with this vast network poured money into the foundations of what are today some of the most valuable business properties in the world. 

1998 was the year I transitioned my software development focus from R&D, C and C++ development to Internet Computing. I recognized that one could craft very efficient programs with much less code using dynamic scripting languages like Ruby, Python and PHP. If it took 25 lines of Java or C++ to put a button on the screen, Ruby or Tcl/Tk did it in one line. I was hooked on that concept. 

The early commercial Internet was all about established software titans showing off their chops. Coding for the web involved Microsoft ASP, Visual Studio and SQL Server to deliver web applications that ran on hugely energy inefficient Compaq Proliant servers. Other quirky technologies like Cold Fusion were often used too. Many friends and colleagues have done what I have and hung out a shingle as an Internet computing engineer. Need a web enabled CRM? I can write you one. Need to manage your freight forwarding logistics company on the web? I can make you a web app for that. Need a website to sell flowers online? I can make you one. Need to send 50,000 emails to your world-wide employees? Got that covered. Have to interface to an EDI system with an AS/400 legacy database and a transactional website? Let's do it. Ariba XML catalog to a SMB web site with an XML catalog of business pens and office equipment? Sure, why not. 

In the early years of running your own business as a software engineering consultant or freelance programmer, you like me, will inevitably experience the pain of working capital shortages. You'll collect a cadre of loyal clients with small or tiny budgets. You cannot easily sell them anything from Microsoft, Oracle or most other enterprise technology companies. Try presenting a license acquisition cost of $22,000 for a database server to your SMB client. The world of proprietary and expensive software pushed me to drop all that and adopt Open Source Software as my toolkit. I started developing using Linux as my operating system, PHP as my server-side scripting language and PostgreSQL as my database.

Ignoring Perl as a web app scripting language and adopting the new kid on the block, PHP, meant building out a CMS was best done with Drupal and ecommerce for the masses with osCommerce. There was very little Ruby or Python code for these endeavours so I hunkered down to try and fill my toolbox with the best tools that did not totally suck. Yahoo came out with their brilliant YUI framework and I jumped on that immediately for the nice documentation and functionalities it provided. Soon after, a software developer named Jack Slocum came along and decided to extend YUI into his own vision of a framework. He called his version YUI-ext and quickly attracted a small but loyal following. His vision was to provide Grids (like Excel), and Trees (like Windows Explorer or Mac OS Finder), dialog boxes, toolbars and most of the widgets that we take for granted today but that were rare back then. Eventually that code matured into its own product called ExtJS that today is perhaps better known as Sencha. Shopify was born at about this period of time in my timeline. Just as Ruby on Rails was becoming the new kid on the block. 

PHP and Javascript were constantly evolving, as were web browsers. As Microsoft oddly chose to stagnate with their now infamously bad IE web browser, Mozilla, Safari and Opera continued to extend web browser capabilities. They did enough so that we could realize the vision of web applications with enough sophistication to justify comparing them to native applications. Tools like Firebug and the Firefox browser, combined with AJAX (ironically a huge thanks to Microsoft for asynchronous Javascript) and the Ruby language for offering introspection into a running web app, developers now had something really hot to work with.

### Finding Shopify, What a Relief! ###

Shopify was being developed and released as a beta service. I signed up as soon as the beta was available, knowing I would be able to offer ecommerce to my clients without having to hack osCommerce PHP again. If you have never examined osCommerce code, you are somewhat lucky. It was at best a spaghetti western in terms of code. Shopify offered a hosted service, eliminating worries about security, backups and system administration tasks. Having to maintain my own Linux and Windows servers in a co-location facility over many years provided me with ample opportunities to freak out with the responsibilities of system administration tasks. How to SSH tunnel between boxes? How to best freak out when hard drives fail? How can RAID can be a source of mirror images of garbage?  How come hackers keep trying for years to break into my puny systems? How lousy is it to have to patch or upgrade services like Apache, PHP, Postfix etc? Answer: very much a lousy thing, at least for me. There is nothing like finding out a client’s SSL certificate has expired and I cannot exchange it for a new one without the password for the old one which has been long forgotten or lost. There is nothing quite like finding out that the database has failed to record entries for a few weeks because of a memory corruption bug. 
 
Shopify to the rescue! Hosted ecommerce! No more headaches! Simple templating with Liquid! The ability to use and write any Javascript I want! That is the pattern that works for me and should work for almost anyone.